---
interface Props{
    class?: string
    title: string
}
const {title} = Astro.props
---

<article class={ 
    `${Astro.props.class}
    col-span-5
    relative rounded-xl
    backdrop-blur-md
    border border-black/10
    shadow-inner shadow-white/10
    overflow-hidden
    group
    `}>
   

    <div class="absolute bottom-0 top-0 z-10 h-full w-full
             bg-gradient-to-b from-transparent from-17% via-[#151836]/50 to-[#151836]/80">
   </div>

   <slot name="image"></slot>

    <div class="relative select-none flex flex-col gap-1 p-4 text-lg z-20 justify-end h-full">

    <h2 class="dark:text-white text-3xl font-bold text-balance text-black mb-4">{title}</h2>
    <slot name = "content"></slot>
</div>
</article>

<script>
    document.addEventListener("astro:page-load", () => {
      const backgrounds = document.querySelectorAll(
        ".background"
      ) as NodeListOf<HTMLElement>
  
      if (window.IntersectionObserver == null) {
        backgrounds.forEach((bkg) => {
          bkg.style.backgroundImage = "url('" + bkg.dataset.src + "')"
        })
        return
      }
  
      function handleIntersection(entries: IntersectionObserverEntry[]) {
        entries.map((entry) => {
          if (entry.isIntersecting) {
            const target = entry.target as HTMLElement
            const { style, dataset } = target
            // Item has crossed our observation
            // threshold - load src from data-src
            style.backgroundImage = "url('" + dataset.src + "')"
            // Job done for this item - no need to watch it!
            observer.unobserve(entry.target)
          }
        })
      }
  
      const observer = new IntersectionObserver(handleIntersection, {
        rootMargin: "100px",
      })
  
      backgrounds.forEach((bkg) => observer.observe(bkg))
    })
  </script>